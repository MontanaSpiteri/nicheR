% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_niches.R
\name{find_niches}
\alias{find_niches}
\title{Identify Spatial Niches}
\usage{
find_niches(
  spe,
  fov = NULL,
  anno = "Anno",
  x_coord = "x",
  y_coord = "y",
  tile_height = 1000,
  tile_shift = 100,
  num_clusters = 9,
  cores = 10,
  prob = FALSE,
  n_permutations = 100
)
}
\arguments{
\item{spe}{A SpatialExperiment object. Polygon centroid coordinates (when applicable), global and/or local x/y spatial co-ordinates, annotation and cell barcode information stored in column data.}

\item{fov}{Optional (Default: NULL). If applicable, a character string specifying the name of the fields of view column in spe.}

\item{anno}{A character string specifying the name of the annotation column in spe (Default: 'Anno').}

\item{x_coord}{A character string specifying the name of the column containing x spatial co-ordinates (Default: 'x'). If `fov=NULL`, these will be global co-ordinates, else, local co-ordinates.}

\item{y_coord}{A character string specifying the name of the column containing y spatial co-ordinates (Default: 'y'). If `fov=NULL`, these will be global co-ordinates, else, local co-ordinates.}

\item{tile_height}{A vector specifying tile height (Default: 1000).}

\item{tile_shift}{A vector specifying tile shift (Default: 100).}

\item{num_clusters}{A vector specifying the number of clusters (Default: 9).}

\item{cores}{A vector specifying the number of cores (Default: 10).}

\item{prob}{A logical value indicating if the user in interested in calculating probability (Default: FALSE).}

\item{n_permutations}{A vector specifying the number of permutations to use for null hypothesis testing (Default: 100).}
}
\value{
Dataframe identifying spatial niches assignment or when `prob=TRUE` the probability of each niche for each tile.
}
\description{
Find niches of commonly co-occurring cell types in spatial transcriptomics or proteomics data.
}
\details{
`find_niches` uses the cell type positions and provided cell type annotation as input to identify niches of
commonly co-occurring cell types. `find_niches` works using a window approach. First each FOV, if applicable, or the entire region
are divided into overlapping windows of size `tile_height` times `tile_height`. These windows shifted by `tile_shift` in x and y
direction resulting in overlaps. In each window, we count the number of different cell types.
Using a Bray-Curtis dissimilarity implemented a hierarchical clustering tree is built, which can be used to determine `num_clusters`
niches. For each `tile_shift` by `tile_shift` tile of each region is overlapped by multiple windows with
an associated niche label used to determine the probability of each tile to be a member of a certain niche or using
a majority voting strategy to identify a niche label. Note that edges of FOVs or entire regions are expanded to avoid edge effects. Hence, for
FOVs that are adjacent treat them like one continuous region.
}
